#!/usr/bin/perl
# Copyright (c) 2009, Uta Priss. 
# http://www.upriss.org.uk
# For licence information run "fcastone -l"

# Note: changecrossymbol() should be exact copy of function in fcastone
# fileinput() is a subset of fcastone.input()

use strict;

#%%%%%%%%%%%%%% read arguments, open files %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

my $fcastonelocation = "/usr/local/bin/fcastone";            ## GLOBAL VARIABLE
my $var1;                                                    ## temp variable
my $filename1 = $ARGV[-2];                                   ## input filename
my $filename2 = $ARGV[-1];                                   ## output filename
my (@ctxt, $filecont, $message);
my %opt;                                                     ## GLOBAL VARIABLE
my $stdinfilecount = 0;                                      ## GLOBAL VARIABLE
my @stdinarray;                                              ## GLOBAL VARIABLE

$opt{sil} = 0; $opt{nam} = 0; $opt{noI} = 0; $opt{noO} = 0;
foreach $_ (@ARGV) {                                         ## reading the options
    if (/^\-.*s/) { $opt{sil} = 1; }
    if (/^\-.*F/) { $opt{nam} = 1; }
    if (/^\-.*n/) { $opt{noI} = 1; $opt{sil} = 1; }
    if (/^\-.*N/) { $opt{noO} = 1; $opt{sil} = 1; }
}

if ( $opt{noI} ) {
    @stdinarray = <STDIN>;
    $var1 = join("%&%x",@stdinarray); 
    if ($var1 =~ /\|!\|/) {                             ## several files are entered
	@stdinarray = split(/\|!\|/,$var1);
    } else {
	@stdinarray = $var1;
    }
}

if ($filename1 eq "" or $filename1 =~/^-/) {                 ## no filename2 given
    $filename1 = $filename2;
    $filename2 = "";
}

($ctxt[0],$message) = flintmain($filename1);

if ($message) { print $message }                             ## no output file needed
else {
    if ($filename2 eq "") { print "Missing output filename\n"; exit}
    if (-e $filename2 and $opt{sil} == 0) {                  ## if not silent: warn
	print "$filename2 exists and will be overwritten, OK?";
	$var1 = <STDIN>;
	if ($var1 !~ /y/i) {exit;}
    }
    $filecont = fileoutput($ctxt[0]);

    if ($filename2 =~ /(\w+)\.(\w+)/ and $2 ne "cxt") {
	if ($opt{noO}) {
	    open (PIPE, "| /$fcastonelocation -nNs format.cxt $1.$2");
	} else {
	    open (PIPE, "| /$fcastonelocation -ns format.cxt $1.$2");
	}
	print PIPE $filecont; 
	close PIPE;
    } else {
	if ($opt{noO}) {
	    print $filecont;
	} else {
	    open (OUT, '>',$filename2);
	    print OUT $filecont; 
	    close OUT;
	}
    }
}

#%%%%%%%%%%%%%%%%%%%% end of non-library use %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub flintmain {
    my $raoperation = $_[0];
    my ($temp,@carray,$messg);

    if ($raoperation =~ /\.bat$/) {                      ## read from .bat file
	open (ARGF,"$raoperation");
	$raoperation = join("",<ARGF>);
	$raoperation =~ s/\s+//g;
	close ARGF;
    }
    $temp = 1;
    while ($raoperation =~ /(\w+\.\w+)/) {
	$raoperation =~ s/(\w+\.\w+)/\$carray[$temp]/;
	($carray[$temp]{o},$carray[$temp]{a},$carray[$temp]{m}) = fileinput($1);
	$temp++;
    }
    while ($raoperation =~ /\<(.*?)\>/) {
	$raoperation =~ s/\<(.*?)\>/\$carray[$temp]/;
	$carray[$temp]{m} = $1;
	$temp++;
    }                                  ## equal can only be used as the last function

    if ($raoperation =~ /\Sequal/) { error("Nested use of 'equal'.",1) }
    $carray[0] = eval("$raoperation");
    if ($carray[0] =~ /^eq/) {
	if ($carray[0] eq "eq1") {$messg = "Matrices are equal\n";}
	elsif ($carray[0] eq "eq2") {
	 $messg="Matrices cannot be equal because they have different sizes or sets\n";
        } else {$messg = "Matrices are not equal\n";}
    } elsif ($carray[0]{m} =~ /^ONE|NUL|DIA|AID$/) {
	$messg = "Result is $carray[0]{m} matrix\n";
    }

    return ($carray[0],$messg);

}

#%%%%%%%%%%%%%%%%%%%% end of main part %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub fileinput {
    my ($filena) = $_[0];
    my ($t1,@lines);
    my (@objs, @attrs, @matr, $pid, $line);

    if ($filena =~ /(\w+)\.(\w+)/ and $2 ne "cxt") {
	if ( $opt{noI} ) {
	    eval ('use FileHandle;                  ## this may not work on all OS
	    use IPC::Open2;
	    $pid = open2(*Reader,*Writer,"$fcastonelocation -OnN $1.$2 format.cxt");
	    Writer->autoflush();
	    @lines = split(/%&%x/,$stdinarray[$stdinfilecount]);
	    $stdinfilecount++;
	    chomp (@lines);
	    $line = join("|%|%",@lines);
	    print Writer $line."\n";
	    $line = <Reader>;
	    @lines = split(/\|%\|%/,$line);');      ## end of eval
	} else {
	    open (PIPE, "$fcastonelocation -Ns $1.$2 format.cxt |");
	    @lines = <PIPE>; close PIPE;
	}
    } elsif ( $opt{noI} ) {
	@lines = split(/%&%x/,$stdinarray[$stdinfilecount]);
	$stdinfilecount++;
    } else {
	open (FILE, '<', $filena) 
	    || error("File does not exist.",1);   ## open files
	@lines = <FILE>; close FILE; 
    }

    chomp @lines;
    $t1 = join("%&%x",@lines);                            ## windows return char
    $t1 =~ s/\r//g;
    $t1 =~ s/\s+$//;                                      ## blank lines at end
    if ($t1 =~ /^\s*$/) { error("File is empty.",1) }
    @lines = split(/%&%x/,$t1);

    if ($lines[4] eq "") { $t1 = 5 } else { $t1 = 4 };
    if ($lines[0] !~ /B/i or ((2 * $lines[2]) + $lines[3] +$t1-1 != $#lines)) {
	error("Wrong cxt format.",1);
    }
    @objs = @lines[$t1..$lines[2]+$t1-1];
    @attrs = @lines[$lines[2]+$t1..$lines[2]+$lines[3]+$t1-1];
    @lines = @lines[$lines[2]+$lines[3]+$t1..$#lines];   
    @matr = changecrosssymbol("X","\\.","1","0",@lines);

    return \@objs, \@attrs, \@matr;
}

sub fileoutput {
    my %ct = %{$_[0]};
    my ($temp1, $temp2, $fctt);   

    $fctt = "B\n\n".@{$ct{o}}."\n".@{$ct{a}}."\n\n";
    foreach $temp1 (@{$ct{o}})    { $fctt .= "$temp1\n"; }
    foreach $temp1 (@{$ct{a}}) { $fctt .= "$temp1\n"; }
    foreach $temp1 (@{$ct{m}}) {
	foreach $temp2 (@{$temp1}) {
	    if ($temp2 == 0) {$fctt .= ".";} else {$fctt .= "X";}
	}
	$fctt .= "\n";
    }
    return $fctt;
}

#%%%%%%%%%%%%%% end of input/output %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub changecrosssymbol {                              ## does this: .X..X -> 01001
    my ($char1,$char2,$char1a, $char2a,@lns) = @_;   ## X,.,1,0, lines
    my ($elem, $temp, @rel);                         ## also changes it into array ref
    foreach $elem (@lns) {
	$elem =~ /([$char1$char2]+)/i;
	$temp = $1;
	$temp =~ s/$char1/$char1a/gi;
	$temp =~ s/$char2/$char2a/gi;
	push (@rel, [split (//,$temp)]);
    }
    return @rel;
}

sub dual {
    my %con1 = %{$_[0]};
    my ($i, $j,%con3,@mout,$count);
    if ($con1{m} =~ /^ONE|NUL|DIA|AID$/) {
	$con3{m} = $con1{m}; return \%con3;
    }
    my @m = @{$con1{m}};
    $count=0;

    @{$con3{o}} = @{$con1{a}};
    @{$con3{a}} = @{$con1{o}};

    foreach $i (@m) {
	foreach $j (@{$i}) {
	    push (@{$mout[$count]},$j);
	    $count++;
	}
	$count=0;
    }
    $con3{m} = \@mout;
    return \%con3;
}

sub invers {
    my %con1 = %{$_[0]};
    my ($i,$j,@mout,%con3);
    if ($con1{m} eq "ONE"){
	$con3{m} = "NUL"; return \%con3;
    } elsif ($con1{m} eq "NUL"){
	$con3{m} = "ONE"; return \%con3;
    } elsif ($con1{m} eq "DIA"){
	$con3{m} = "AID"; return \%con3;
    } elsif ($con1{m} eq "AID"){
	$con3{m} = "DIA"; return \%con3;
    } 
    my @m = @{$con1{m}};

    @{$con3{o}} = @{$con1{o}};
    @{$con3{a}} = @{$con1{a}};

    for($i = 0; $i<= $#m; $i++) {
	for($j = 0; $j<= $#{$m[0]}; $j++) {
	    if ($m[$i][$j] == 1) {$mout[$i][$j] = 0}
	    else {$mout[$i][$j] = 1}
	}
    }
    $con3{m} = \@mout;
    return \%con3;
}

sub restr {
    my %con1 = %{$_[0]};
    my ($odegr,$adegr) = ($_[1],$_[2]);
    my (%hash1, %con3,@mout,$i,$j,@m1);
    @{$con3{o}} = @{$con1{o}};
    @{$con3{a}} = @{$con1{a}};
    @m1 = @{$con1{m}};

    for($i = 0; $i<= $#m1; $i++) {
	for($j = 0; $j<= $#m1; $j++) {
	    if ($m1[$i][$j] == 1) {
		$hash1{"o".$i}++;
		$hash1{"a".$j}++;
	    }
	} 
    }
    for($i = 0; $i<= $#m1; $i++) {
	for($j = 0; $j<= $#m1; $j++) {
	    if (($hash1{"o".$i}>=$odegr and 
		 $hash1{"a".$j}>=$adegr)
		and $m1[$i][$j] == 1){
		$mout[$i][$j] = 1;
	    } else {
		$mout[$i][$j] = 0;
	    }
	}
    }

    $con3{m} = \@mout;
    return \%con3;
}

sub union {
    my %con1 = %{$_[0]};
    my %con2 = %{$_[1]};
    my ($i,$j,%con3,@mout,@m1,@m2);
    if ($con1{m} !~ /^ONE|NUL|DIA|AID$/ and
	$con2{m} !~ /^ONE|NUL|DIA|AID$/) {
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = @{$con1{a}};
	@m1 = @{$con1{m}};
	@m2 = @{$con2{m}};
	if ($#m1 ne $#m2 or $#{$m1[0]} ne $#{$m2[0]}) {
	    error("The matrices have different sizes.",0);
	} elsif ($opt{nam} == 1) {
	    if (! arrayequal($con1{o},$con2{o})) {
		error("The sets of objects are different.",0);
	    }
	    if (! arrayequal($con1{a},$con2{a})) {
		error("The sets of attributes are different.",0);
	    }
	}
    } elsif ($con1{m} eq "ONE" or $con2{m} eq "NUL") { 
	return \%con1; 
    } elsif ($con2{m} eq "ONE" or $con1{m} eq "NUL") { 
	return \%con2; 
    } elsif ($con1{m} eq $con2{m}) { 
	return \%con1;
    } elsif (($con1{m} eq "DIA" and $con2{m} eq "AID") 
	   or ($con1{m} eq "AID" and $con2{m} eq "DIA")){
		 $con3{m} = "ONE"; return \%con3; 
    } elsif ($con1{m} eq "DIA" or $con1{m} eq "AID") { 
	@{$con3{o}} = @{$con2{o}};
	@{$con3{a}} = @{$con2{a}};
	@m1 = @{$con2{m}};
	@m2 = matr($con1{m},$#{$con3{o}},$#{$con3{a}});
    } elsif ($con2{m} eq "DIA" or $con2{m} eq "AID") { 
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = @{$con1{a}};
	@m1 = @{$con1{m}};
	@m2 = matr($con2{m},$#{$con3{o}},$#{$con3{a}});
    }

    for($i = 0; $i<= $#m1; $i++) {
	for($j = 0; $j<= $#{$m1[0]}; $j++) {
	    if($m1[$i][$j] == 1 or $m2[$i][$j] == 1){
		$mout[$i][$j] = 1;
	    } else {
		$mout[$i][$j] = 0;
	    }
	}
    }
    $con3{m} = \@mout;
    return \%con3;
}

sub inters {
    my %con1 = %{$_[0]};
    my %con2 = %{$_[1]};
    my ($i,$j,%con3,@mout,@m1,@m2);
    if ($con1{m} !~ /^ONE|NUL|DIA|AID$/ and
	$con2{m} !~ /^ONE|NUL|DIA|AID$/) {
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = @{$con1{a}};
	@m1 = @{$con1{m}};
	@m2 = @{$con2{m}};
	if ($#m1 ne $#m2 or $#{$m1[0]} ne $#{$m2[0]}) {
	    error("The matrices have different sizes.",0);
	} elsif ($opt{nam} == 1) {
	    if (! arrayequal($con1{o},$con2{o})) {
		error("The sets of objects are different.",0);
	    }
	    if (! arrayequal($con1{a},$con2{a})) {
		error("The sets of attributes are different.",0);
	    }
	}
    } elsif ($con1{m} eq "ONE" or $con2{m} eq "NUL") { 
	return \%con2; 
    } elsif ($con2{m} eq "ONE" or $con1{m} eq "NUL") { 
	return \%con1; 
    } elsif ($con1{m} eq $con2{m}) { 
	return \%con1;
    } elsif (($con1{m} eq "DIA" and $con2{m} eq "AID") 
	   or ($con1{m} eq "AID" and $con2{m} eq "DIA")){
		 $con3{m} = "NUL"; return \%con3; 
    } elsif ($con1{m} eq "DIA" or $con1{m} eq "AID") { 
	@{$con3{o}} = @{$con2{o}};
	@{$con3{a}} = @{$con2{a}};
	@m1 = @{$con2{m}};
	@m2 = matr($con1{m},$#{$con3{o}},$#{$con3{a}});
    } elsif ($con2{m} eq "DIA" or $con2{m} eq "AID") { 
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = @{$con1{a}};
	@m1 = @{$con1{m}};
	@m2 = matr($con2{m},$#{$con3{o}},$#{$con3{a}});
    }

    for($i = 0; $i<= $#m1; $i++) {
	for($j = 0; $j<= $#{$m1[0]}; $j++) {
	    if($m1[$i][$j] == 0 or 
	       ($#m2 > 0 and $m2[$i][$j] == 0)){
		$mout[$i][$j] = 0;
	    } else {
		$mout[$i][$j] = 1;
	    }
	}
    }
    $con3{m} = \@mout;
    return \%con3;
}

sub compos {
    my %con1 = %{$_[0]};
    my %con2 = %{$_[1]};
    my ($i,$j,$k,$flag,%con3,@mout,@m1,@m2);
    my ($degr) = $_[2];                                     ## how many in common
    if (!$degr) {$degr = 1}                                 ## how many in common
    if ($degr > 1 and ($con1{m} =~ /^ONE|NUL|DIA|AID$/ or 
	$con2{m} =~ /^ONE|NUL|DIA|AID$/)) {
       error("This type of composition should not be used with ONE,DIA,NUL or AID.",0);
    }
    if ($con1{m} !~ /^ONE|NUL|DIA|AID$/ and
	$con2{m} !~ /^ONE|NUL|DIA|AID$/) {
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = @{$con2{a}};
	@m1 = @{$con1{m}};
	@m2 = @{$con2{m}};
	if ($#{$m1[0]} ne $#m2) {
	    error("The matrices have different sizes.",0);
	} elsif ($opt{nam} == 1) {
	    if (! arrayequal($con1{a},$con2{o})) {
		error("Object/attribute sets are different.",0);
	    }
	}
    } elsif ($con1{m} eq "NUL" or $con2{m} eq "NUL") { 
	$con3{m} = "NUL"; return \%con3; 
    } elsif ($con1{m} eq "DIA") { return \%con2;
    } elsif ($con2{m} eq "DIA") { return \%con1;
    } elsif (($con1{m} eq "ONE" or $con1{m} eq "AID") and
	($con2{m} eq "ONE" or $con2{m} eq "AID")) { 
	$con3{m} = "ONE"; return \%con3; 
    } else {
	if ($con1{m} eq "ONE" or $con1{m} eq "AID") { 
	    @{$con3{o}} = @{$con2{o}};
	    @{$con3{a}} = @{$con2{a}};
	    @m2 = @{$con2{m}};
	    @m1 = matr($con1{m},$#{$con3{o}});
	} else {
	    @{$con3{o}} = @{$con1{o}};
	    @{$con3{a}} = @{$con1{a}};
	    @m1 = @{$con1{m}};
	    @m2 = matr($con2{m},$#{$con3{a}});
	}
    }
    for($i = 0; $i<= $#m1; $i++) {
	for($k = 0; $k<= $#{$m2[0]}; $k++) {
	    $flag = 0;
	    for($j = 0; $j<= $#{$m1[0]}; $j++) {
		if ($m1[$i][$j]==1 and $m2[$j][$k]==1) {
		    $flag++;
		}
	    }
	    if ($flag >= $degr) {$mout[$i][$k] = 1}
	    else {$mout[$i][$k] = 0}
	}
    }
    $con3{m} = \@mout;
    return \%con3;
}

sub appos {
    my %con1 = %{$_[0]};
    my %con2 = %{$_[1]};
    my ($i, %con3,@mout,@m1,@m2);
    if ($con1{m} =~ /^ONE|NUL|DIA|AID$/ and
	$con2{m} =~ /^ONE|NUL|DIA|AID$/) {
	error("It is not possible to use apposition\n or".
	"subposition for ONE,NUL,DIA,AID\nPlease, create your context in an editor",1);
    }
    if ($con1{m} =~ /^ONE|NUL|DIA|AID$/) {
	@m2 = @{$con2{m}};
	@{$con3{o}} = @{$con2{o}};
	@{$con3{a}} = (@{$con2{o}},@{$con2{a}});
	@m1 = matr($con1{m},$#{$con3{o}});
    } elsif ($con2{m} =~ /^ONE|NUL|DIA|AID$/) {
	@m1 = @{$con1{m}};
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = (@{$con1{o}},@{$con1{a}});
	@m2 = matr($con2{m},$#{$con3{o}});
    } else {
	@m1 = @{$con1{m}};
	@m2 = @{$con2{m}};
	if ($#m1 ne $#m2) {
	    error("The matrices have different sizes.",0);
	    while ($#m1 > $#m2) { pop(@m1) }
	} elsif ($opt{nam} == 1) {
            if (! arrayequal($con1{o},$con2{o})) {
                error("Object/attribute sets are different.",0);
            }
        }
	@{$con3{o}} = @{$con1{o}};
	@{$con3{a}} = (@{$con1{a}},@{$con2{a}});
    }
    for($i = 0; $i<= $#m1; $i++) {
	@{$mout[$i]}=(@{$m1[$i]},@{$m2[$i]});
    }
    $con3{m} = \@mout;
    return \%con3;
}

sub subpos {
    my $con1 = $_[0];
    my $con2 = $_[1];

    return dual(appos(dual($con1),dual($con2)));
}

sub equal {
    my %con1 = %{$_[0]};
    my %con2 = %{$_[1]};
    my ($i,$j,$flag);
    if ($con1{m} =~ /^ONE|NUL|DIA|AID$/ or
	$con2{m} =~ /^ONE|NUL|DIA|AID$/) {
	if ($con1{m} eq $con2{m}) { return "eq1"; }
	else {return "eq0";}
    }
    my @m1 = @{$con1{m}};
    my @m2 = @{$con2{m}};

    if ($#m1 ne $#m2 or $#{$m1[0]} ne $#{$m2[0]}) { return "eq2"; }
    if ($opt{nam} == 1) {
	if (! arrayequal($con1{o},$con2{o})) { return "eq2"; }
	if (! arrayequal($con1{a},$con2{a})) { return "eq2"; }
    }

    $flag = 0;
    for($i = 0; $i<= $#m1; $i++) {
	for($j = 0; $j<= $#{$m1[0]}; $j++) {
	    if($m1[$i][$j] != $m2[$i][$j]){
		$flag = 1; last;
	    }
	} 
	if ($flag == 1) {last;}
    }
    if ($flag == 0) {return "eq1"}
    else {return "eq0";}
}

sub trans {
    my $corig = $_[0];
    my @conarray;
    my $count = 0;
    my $cfinal = $corig;

    $conarray[$count] = compos($corig,$corig);
    while (equal($conarray[$count-1],$conarray[$count]) eq "eq0") {
	$count++;
	$conarray[$count] = compos($conarray[$count-1],$corig);
    }
    foreach $_ (@conarray) {
	$cfinal = union($cfinal,$_);
    }
    return $cfinal;
}

sub matr {
    my ($type,$wid,$hei) = ($_[0],$_[1],$_[2]);
    my ($i,$j,@mout);
    if (!$hei) {$hei = $wid;} 

    for($i = 0; $i<= $wid; $i++) {
	for($j = 0; $j<= $hei; $j++) {
	    if ($type eq "ONE" or 
		($type eq "DIA" and $i==$j) or
		($type eq "AID" and $i!=$j)) {
		$mout[$i][$j] = 1;
	    } else {
		$mout[$i][$j] = 0;
	    }
	}
    }
    return @mout;
}

sub arrayequal {
    my @set1 = @{$_[0]}; 
    my @set2 = @{$_[1]}; 
    my $count;

    for ($count = 0; $count <= $#set1; $count++) {
	if ($set1[$count] ne $set2[$count] ) { return 0 }
    }
    return 1;
}

sub error {
    my ($sentence,$severity) = ($_[0],$_[1]);

    if ($severity == 0) {
	print "Warning: $sentence The output may not be meaningful.\n";
    } elsif ($severity == 1) {
	print "Error: $sentence No output generated.\n";
	exit;
    }
}

